## Preamble

    EIP: <to be assigned>
    Title: Update invalid signature definition in EC precompile
    Author: James Ray, Yoichi Hirai, and Adam Smolarek
    Type: Standard Track
    Category): Core
    Status: Draft
    Created: 2017-02-21
    Requires: EIP-155

## Simple Summary
Fix the inconsistency with invalid signature in the ECRECOVER precompile vs the ECRECOVER function as proposed [here](https://github.com/ethereum/yellowpaper/pull/305#discussion_r169570558).

Further info is [here](https://github.com/ethereum/yellowpaper/pull/282).

## Abstract
The Yellow Paper formal specification currently has a conflict between the invalid signature definition in the [ECREC precompile](https://ethereum.github.io/yellowpaper/paper.pdf#page.20) vs in the ECDSARECOVER function in [Appendix F](https://ethereum.github.io/yellowpaper/paper.pdf#appendix.F), where the latter change is more up-to-date as introduced in [EIP-155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md). This EIP proposes to update the definition of an invalid signature in the ECREC precompile to as it is in the ECDSARECOVER function in Appendix F.

## Motivation
Following are the two conflicting definitions of an invalid signature in the Yellow Paper:

![screenshot from 2018-02-21 19-28-07](https://user-images.githubusercontent.com/16969914/36470011-6e5f5080-173d-11e8-98e8-7640bcb19552.png)

![screenshot from 2018-02-21 19-29-26](https://user-images.githubusercontent.com/16969914/36470040-9105d01e-173d-11e8-8870-ebdeec146e9b.png)

To reiterate in text, the definition of an invalid signature in the EC precompile is: ECDSARECOVER(h, v, r, s) = âˆ…, or `$\mathtt{\tiny ECDSARECOVER}(h, v, r, s) = \varnothing$`.

Whereas the definition of an invalid signature in the ECDSARECOVER function (in appendix F) is as in the second screenshot above:

```
We declare that a signature is invalid unless all the following conditions are true:
\begin{align}
0 < \linkdest{r}{r} &< \mathtt{\tiny secp256k1n} \\
0 < \linkdest{s}{s} &< \mathtt{\tiny secp256k1n} \div 2 + 1 \\
\hyperlink{v}{v} &\in \{27,28,\mathtt{\tiny chain\_{\mathrm{id}}} \times 2 + 35, \mathtt{\tiny chain\_{\mathrm{id}}} \times 2 + 36\}
\end{align}
where:
\begin{align}
\mathtt{\tiny secp256k1n} &= 115792089237316195423570985008687907852837564279074904382605163141518161494337
%\mathtt{\tiny secp256k1p} &= 2^{256} - 2^{32} - 977\\
\end{align}
``` 

As stated above: "this EIP proposes to update the definition of an invalid signature in the ECREC precompile to as it is in the ECRECOVER function in Appendix F." 

## Specification

Update implementations of the EC precompile contract to as above, again, from:
> In the case of an invalid signature (`$\mathtt{\tiny ECDSARECOVER}(h, v, r, s) = \varnothing$`), we return no output.
to: "In the case of an invalid signature (as defined in ), we return no output.

## Rationale
The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.

## Backwards Compatibility
All EIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The EIP must explain how the author proposes to deal with these incompatibilities. EIP submissions without a sufficient backwards compatibility treatise may be rejected outright.

## Test Cases
Test cases for an implementation are mandatory for EIPs that are affecting consensus changes. Other EIPs can choose to include links to test cases if applicable.

## Implementation
The implementations must be completed before any EIP is given status "Final", but it need not be completed before the EIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of "rough consensus and running code" is still useful when it comes to resolving many discussions of API details.

## Copyright
Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).
