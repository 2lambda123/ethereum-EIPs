---
eip: eip-daa
title: Decentralized Autonomous Access (DAA)
description: DAAs represent an access over digital or physical things & resources, with the ability to connect with entities that seeking to use it
author: <Daniel @eartho-group>
discussions-to: <URL>
status: Draft
type: <Standards Track, Meta, or Informational>
category (*only required for Standards Track): ERC
created: 2022-03-22
requires (*optional): <EIP number(s)>
---

## Author Note
We are looking for partners, If you like the concept, send us message, we are about to launch our marketplace and store, we dont have money to offer you, but we believe that if you do the right things so the money follow.

## Abstract
As humans, we are constantly seeking as much access to resources as possible, We also make access trades for our needs regularly, it can be for information, food, rides, content, hotels, jobs, and so on. The trade could be as simple as me looking for access to food and the other side looking for access to money.

Looking at our economy as an access trade, it appears that we are trading an access on things with every action we take.
For example, when we buy a hamburger, actually we are purchasing the access to it created by the restaurant's employees, who also trade in their resources and sell access to their time and energy to the owner of a restaurant, what called 'job'.)

An access emerges from the abilities of actors to benefit from ‘things’. 
The actors are divided into two groups: those who create the access and make it possible for it to be exchanged, and those who use it for their own purposes and needs.

A decentralized autonomous access (DAA), is an access represented by rules encoded as a computer program that is transparent, controlled by the actors and not influenced by a 3rd party entity, in other words, they are member-owned trade that do not have a centralized/controller middleman.
A DAA's financial transaction record and program rules are maintained on a blockchain.
DAA is automatically managed by pre-accepted agreements called trust models

While ERC-721(NFT) created for "NFTs represent ownership over digital or physical assets.",
ERC-DAA created for "DAAs represent an access over digital or physical things & resources, with the ability to connect with entities that seeking to use it"

The goal is to develop a single language and agreement to represent every action in the global economy through the concept of "access."
So called the "Access Economy"
"Guy wakes up in the morning to go to work, he looks for an access to ride for work, and when he arrives at work, the doors open for him because he has access to the offices. He is compensated for sharing his access to his time and knowledge by receiving a salary. He was looking for an access to food around noon. After work, he goes to see a friend by an access to a scooter that he rents on the street by the hour. They watch content that they have access to at his friend's house, and then they play a game with a new skin that they have access to for a year."

## Motivation
Because ownership is based on social consensus and relies on a third party to record and enforce it, it is nearly impossible to transition from the current economy to the web3 world, because that data cannot be shared and cannot be on-chain.

By changing our mindset from myth of “ownership, control, assets” to “access”, We are able to eliminate several issues such as the need for trust on the old registrations and records of the institutions.

Trading access is a convenient and cost-effective way to use resources without the financial, emotional, oracle issues, or social burdens that come with ownership.

## Specification

Proofs represent the requirements that a given action must meet in order to connect to the access. - For instance, minbalance
Trust represent - The logic used to build trust between the two actors.

Every DAA composed from the following properties:
- holder, address
An address of the main holder of the access

- accessibility, uint8 - private , protected , public
Defines if the DAA can be accessed by no-one/owner permission/everyone

- fungibleConnections, boolean
Determine if a connection can be changed or not. In case of false once a connection has made,
It cannot be changed or be canceled.  

- maxConnections, uint32
The max connections an access can have 

- connections, map(uint8 => ConnectedEntity)
Entities that are connected with the access
struct ConnectedEntity { uint8 role; uint8 status; uint256 startTime; }

- roleToProofsConfig, map(uint8 => ProofsConfig)
Defines the required proofs according to specific role.
So for example, role of guest will require minimum balance of 100$ in his account and role of friend will required 0$.

- roleToTrustConfig, map(uint8 => TrustConfig)
Defines the required proofs according to specific role.
So for example, role of guest will require trust of first pay of 5$ and deposit of 50$ and role of friend will required 0$ of both.


Entity can interact with DAA with following API

    /**
     * Proves that 'account' has the requried proofs in order to connect with the access.
     * */
    function prove(
        uint256 accessId,
        address account,
        uint8 role
    ) external returns (bool);

    /**
     * Creates the connection for given 'accessId' , 'account' and 'role'.
     * It depends on the role whether it allows it or not, based on the proofs and authorization configuration.
     * */
    function open(
        uint256 accessId,
        address account,
        uint8 role,
        uint256 startTime
    ) external returns (bool);

    /**
     * Initating the trust process between the actors.
     *
     * Trust can be build by:
     * 1. Transferring the money at once (Buy something, or get one time access. - example: ticket to party)
     * 2. Trasnfering the money with inital amount and final amount when finish , while the money in deposit
     * 3. Transferring the money in a stream way, with fixed rate and money. which represent the amount of job that has been done - example: taxi ride
     * 4. Transferring the money in stages. for example professional service, that split his job into smaller ones and charge for each one
     * 5. 3rd party trust - Transfer the funds as a deposit to the operator, who verifies that everything is in order and, if there is a problem, decides where the funds should be transferred.
     * */
    function trust(uint256 accessId, address account) external returns (bool);

    /**
    * Closing the connection for 'account' with the DAA
    * */
    function close(uint256 accessId, address account) external returns (bool);

## Rationale
Its the very first draft.
There is consideration to split this into proof, trust , access instead of being in one contract.
For me its more a philosfical considoration that im wondering if an access can be represented without this things based on "An access emerges from the abilities of actors to benefit from ‘things’."
I hope people will help me to achieve that conclusions in the future. 

## Backwards Compatibility
There is some desire to made it possible to take existing ERC-721 tokens and made them an access too.

## Test Cases
Test cases for an implementation are mandatory for EIPs that are affecting consensus changes.  If the test suite is too large to reasonably be included inline, then consider adding it as one or more files in `../assets/eip-####/`.

## Reference Implementation
In private repo for now, so will be open

## Security Considerations
Every action should be accepted by the actors.

## Copyright
Eartho Group, Daniel, Tel Aviv
